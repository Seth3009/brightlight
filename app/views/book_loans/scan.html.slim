-if params[:check] == 'only'
  - title "Scan to check"
  h4 Teacher's book scan to check

  .card-panel.red.lighten-4 
    |This process is only used for checking books. For End-of-year Checkout Process, please click here: 
    = link_to "Checkout", scan_employee_book_loans_path(@teacher, check:'out', year: @academic_year_id)  

-else
  - title "Scan to check out/return"
  h4 Teacher's book scan to check out
  .card-panel.red.lighten-4 
    |This process is used for End-of-year Checkout Process. If you want to check the book, please click here: 
    = link_to scan_employee_book_loans_path(@teacher, check:'only', year: @academic_year_id)  
      |Scan to Check
      i.material-icons open_in_new
    -if can? :manage, BookLoan
      p For books that you want to return to inventory, please check the <em>Return to Inventory</em> checkbox.
  
nav
  .nav-wrapper
    .brand-logo style="margin-left: 20px; font-size:1.5em"
      = @teacher.name
    ul.right
      li
        .input-field
          = select_tag :acad_year, options_from_collection_for_select(AcademicYear.list_for_menu,:id,:name, @academic_year_id)
      li 
        = link_to 'Done', employee_book_loans_path(@teacher, year: params[:year])

- if can? :manage, BookLoan
  ul.collapsible data-collapsible="expandable"
    li
      .collapsible-header
        | Manual input
        i.material-icons.left keyboard
        -unless params[:check] == 'only'
          .input-field.right-in-header
            = check_box_tag :return_to_inventory 
            = label_tag :return_to_inventory

      .collapsible-body
        .container style="margin-top:1px"
          .row
            .input-field.col.s4
              = label_tag :barcode, nil, class:'active'
              = text_field_tag :barcode, nil
              | Enter barcode and press enter 
            .col.s8
- else
  ul.collapsible data-collapsible="expandable"
    li
      .collapsible-header 
        | Scan bar code
        = hidden_field_tag :barcode

-if params[:check] == 'only'  
  .card-panel#checks
    .row 
      table.compact 
        thead 
          th Barcode 
          th Title 
          th Loaned to 
          th Valid?
        tbody#loan_checks
-else  
  .card-panel#returns
    .row
      table.compact
        thead
          th Barcode
          th Title 
          th Return status
          th Return date
        tbody#book_loans

javascript:
  $(document).ready(function(){
    $("#barcode").keyup(function () {
      $(this).val($(this).val().toUpperCase());
    });
  });
  var param = function(name) {
    return (location.search.split(name + '=')[1] || '').split('&')[0];
  }
  $("#barcode").codeScanner({
    minEntryChars: 11,
    onScan: function($element, input) {
      var barcode = input.trim();
      var acad_year = $("#acad_year option:selected").val();
      $.getJSON("/book_copies/"+barcode+".json?empl="+#{@teacher.id}+"&year="+acad_year, null, function (data) {
        if (param('check') == 'only') {
          check_book_loan(data);
        } else {
          update_book_loan(data);
        }              
      }).fail(function(xhr){
        Materialize.toast($.parseJSON(xhr.responseText).errors, 4000, 'red');
      });           
    }
  });
  $(".input-field").on("keypress", $("#barcode"), function (e) {
    var acad_year = $("#acad_year option:selected").val();
    if (e.keyCode == 13) {
      e.stopPropagation();
      var barcode = $("#barcode").val().trim();
      $.getJSON("/book_copies/"+barcode+".json?empl="+#{@teacher.id}+"&year="+acad_year, null, function (data) {
        if (param('check') == 'only') {
          check_book_loan(data);
        } else {
          update_book_loan(data);
        }
      }).fail(function(xhr){
        Materialize.toast($.parseJSON(xhr.responseText).errors, 5000, 'red');
      });
    }
  });
  var update_book_loan = function (data) {
    var book = data.book_copy;
    var employeeId = book.employee.id;
    var currentUserId = #{raw current_user.try(:id) || 0};
    var acad_year = $("#acad_year option:selected").val();
    if (book.loans) {
      if (book.loans.employee_id == employeeId) {
        url = "/employees/"+ employeeId + "/book_loans/" + book.loans.id;
        var dataToSend = new Object();
        var today = new Date();
        var return_status = $("#return_to_inventory").is(':checked') ? 'RI' : 'R';
        dataToSend = { book_loan: { barcode: book.barcode, return_status: return_status, academic_year_id: acad_year,
                                    return_date: today.toISOString(), user_id: currentUserId }};
        var jsonData = JSON.stringify(dataToSend);
        $.ajax({
          type: 'PUT',
          contentType: "application/json; charset=utf-8",
          url: url,
          data: jsonData,
          dataType: 'json'
        })
        .done(function(m) {
            Materialize.toast('Book checked', 5000, 'green');
            var status = "Returned";
            if (return_status == 'RI') status += " to inventory";
            $("tbody#book_loans").prepend("<tr><td>"+book.barcode+"</td><td>"+book.book_edition.title+"</td><td>"+status+"</td><td>"+today.toUTCString()+"</td></tr>");
        })
        .fail(function(xhr) {
          Materialize.toast($.parseJSON(xhr.responseText).errors, 4000, 'red');
          //Materialize.toast('Book check error', 5000, 'red');
        });
      } else {
        Materialize.toast(book.barcode+' is borrowed by '+book.loans.employee_name, 5000, 'red');
      }
    } else {
      Materialize.toast('Book '+book.barcode+' is not borrowed for the selected year', 5000, 'red');
    }
  }

  var check_book_loan = function (data) {
    var book = data.book_copy;
    var employeeId = book.employee.id;
    var currentUserId = #{raw current_user.try(:id) || 0};
    var acad_year = $("#acad_year option:selected").val();
    if (book.loans) {
      url = "/employees/"+ employeeId + "/loan_check";
      var dataToSend = new Object();
      var today = new Date();
      var matched = book.loans.employee_id == employeeId;
      dataToSend = { loan_check: { book_loan_id: book.loans.id, book_copy_id: book.id, academic_year_id: acad_year,
                                   loaned_to: book.employee.id, scanned_for: employeeId, emp_flag: true, 
                                   matched: matched, user_id: currentUserId }};
      var jsonData = JSON.stringify(dataToSend);
      $.ajax({
        type: 'POST',
        contentType: "application/json; charset=utf-8",
        url: url,
        data: jsonData,
        dataType: 'json'
      })
      .done(function(m) {
        if (matched) {
          Materialize.toast('Book checked', 5000, 'green');
        } else {
          Materialize.toast(book.barcode+' is borrowed by '+book.loans.employee_name, 5000, 'red');
        }
        $("tbody#loan_checks").prepend("<tr><td>"+book.barcode+"</td><td>"+book.book_edition.title+"</td><td>"+book.loans.employee_name+"</td><td>"+(matched ? 'Yes' : 'No')+"</td></tr>");
      })
      .fail(function(xhr) {
        Materialize.toast('Book check error', 5000, 'red');
      });
    } else {
      Materialize.toast('Book '+book.barcode+' is not borrowed for the selected year', 5000, 'red');
    }
  }
