- title 'Purchase Request Approval'

h4 Purchase Request Approval

= form_for @requisition, url: {action: :update_approval} do |f|

  = render 'req_detail', f: f

  nav
    .nav-wrapper
      .brand-logo style="margin-left: 20px; font-size:1.5em"
        | Approval Action
  .card-panel
    table.compact.striped
      thead
        tr
          th Name
          th Approval
          th Date
          th Notes
      tbody
        - @requisition.approvals.where(approve: true).each do |approval|
          tr 
            td = approval.approver.try(:employee).try(:name) || "--"
            td 
              - if approval.approve == true
                |Approved
                i.material-icons.left check_box
              - elsif approval.approve == false
                |Not approved
                i.material-icons.left cancel
              - else
                i.material-icons.left check_box_outline_blank
            td = approval.updated_at.strftime("%d %b %Y") if approval.approve.present?
            td = approval.notes 
    br
    .row.red.lighten-4
      = f.fields_for :approvals do |ff|
        -if ff.object.approver.employee == current_user.employee
          .input-field.col.m2
            = current_user.employee.try(:name)
          .input-field.col.m1.right-align
            = ff.label :approve, 'Approve?', class: 'active'
            = ff.radio_button :approve, true, {class: "with-gap"}
            = ff.label :approve, "Yes", value: true
          .input-field.col.m1
            = ff.radio_button :approve, false, {class: "with-gap"}
            = ff.label :approve, "No", value: false 
          .input-field.col.m8
            = ff.label :notes, "Approval Notes"
            = ff.text_field :notes

    / .row class="#{params[:appvl]=='supv' ? 'red lighten-4' : ''}"
    /   .input-field.col.m3
    /     = f.label 'supervisor/approver', class: 'active'
    /     = f.text_field :supervisor, disabled: true
    /   .input-field.col.m2
    /     = f.select :is_supv_approved, options_for_select([['Yes', true], ['No', false]]), disabled: params[:appvl] != 'supv', prompt: true
    /     = f.label :is_supv_approved, @requisition.is_supv_approved ? 'Request approved' : 'Approve request', class: "active"
    /   .input-field.col.m7
    /     = f.label :req_appvl_notes, "Approval Notes"
    /     = f.text_field :req_appvl_notes, disabled: params[:appvl] != 'supv'
    /   - if params[:appvl] == 'supv'
    /     = f.hidden_field :supv_approved_date, value: Date.today

    / .row.budget-approval class="#{params[:appvl]=='budget' ? 'red lighten-4' : ''}" style="display:#{@requisition.is_budgeted ? 'none' : 'block'}"
    /   .input-field.col.m3
    /     = f.label :budget_approver, class: 'active'
    /     = f.collection_select :budget_approver_id, @supervisors, :id, :name, prompt: "Select budget approver"
    /   - if can? :approve_budget, @requisition
    /     .input-field.col.m2
    /       = f.select :is_budget_approved, options_for_select([['Yes', true], ['No', false]]), prompt: true
    /       = f.label :is_budget_approved, 'Approve Budget'
    /     .input-field.col.m7
    /       = f.label :reject_reason, "Budget notes"
    /       = f.text_field :reject_reason
    /     = f.hidden_field :budget_approved_date, value: Date.today
 
  .toolbar.z-depth-1
    - unless @requisition.is_submitted
      button.btn.waves-effect.waves-light type="submit" name="approve" Submit      
      - if params[:appvl] == 'supv'
        = button_tag class:"btn waves-effect waves-light", type: "submit", name:"send", id:"send_budget", value:"budget", disabled: (@button_state ? false : true), data: {disable: true}
          | Send for Approval
    - else
      button.btn type="submit" data-disable=true disabled=true Already submitted
    = link_to 'Cancel', requisitions_path, class: "waves-effect waves-light btn-flat"

  nav
    .nav-wrapper
      .brand-logo style="margin-left: 20px; font-size:1.5em"
        | Items
      ul.right
        li
          = link_to_add_association f, :req_items, class: "waves-effect waves-teal", 'data-association-insertion-method' => 'append', 'data-association-insertion-node' => '#requisition'
            ' Add Item
            i.material-icons.left playlist_add
  
  = render 'req_items', f: f


