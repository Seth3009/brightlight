.card-panel
  .row
    .input-field.col.m2
      = label_tag 'Dispose Notes'
    .input-field.col.m10
      = text_field_tag :disposed_notes,'', placeholder: "You can fill notes for disposal here"
nav
  .nav-wrapper
    ul
      li
        = link_to dispose_books_path
          | Dispose Books
          i.material-icons.left chevron_left          
    ul.right#add-row
        li
          = link_to '#', onclick: 'clone_row();'
            | Add Row
            i.material-icons.left playlist_add

ul.collapsible data-collapsible="expandable"
  li
    .collapsible-header                
      div.right 
        input.checkbox-toggle type="checkbox" id="use-scanner"
        = label_tag "use-scanner", "Use scanner"
      
.card-panel
  .row
    table#mytable.compact
      thead
        th Barcode
        th Title
        th Authors
      tbody#book_copy
        tr.nested-fields style="display:none;"          
          td.wd15
            .input-field  
              = text_field_tag 'barcode', '', maxlength: 11, class: 'barcode'
          td.wd55
            .input-field     
              = text_field_tag 'booktitle','', class:'booktitle',disabled: true
          td.wd50
            .input-field     
              = text_field_tag 'authors','', class:'authors',disabled: true
          


javascript:
  function clone_row() {
   // make a copy of an existing row. We choose the last row of table
    var rowToAdd = $("#mytable tbody tr:first").clone();
    
    //add it to table
    $("#mytable tbody").append(rowToAdd);
    $('tr:last').removeAttr("style")
  }

  function save_row(barcode) {    
    var notes = $('#disposed_notes').val();
    var url = "/book_copies/dispose_books/new_list/"+barcode+"?notes="+notes
    var dataToSend = new Object();
        dataToSend = { barcode: barcode };
    var jsonData = JSON.stringify(dataToSend);
    
    $.ajax({
      type: 'PUT',
      contentType: "application/json; charset=utf-8",
      url: url,
      data: jsonData,
      dataType: 'json'
    })
    .done(function(m) {
        Materialize.toast('Book disposed', 5000, 'green');
    })
    .fail(function(xhr) {
      Materialize.toast('Book check error', 5000, 'red');
    });
  }

  $(document).ready(function(){
    $("#use-scanner").attr('checked','checked')
    $("#use-scanner").change();
  });

  $("#use-scanner").change(function() {
    $("tr.nested-fields").each(function(){
      v = $(this).find(".booktitle").attr('value');
      if (v == undefined) {
        if ($("#use-scanner").is(":checked")) {
          $(this).hide();
        } else {
          $(this).show();
        }
      } 
    });
    if (!$("#use-scanner").is(":checked")) {
      if ($("tr:last").find(".barcode").val() != "") {
        $(".add-row").trigger('click');
      }
      $("#add-row").show();      
    } else {
      $("#add-row").hide();

    }
  });

  /* =================== search book copies function ============== */

  $(document).on('keyup', '.barcode', function() {
    $(this).val($(this).val().toUpperCase());
    if ($(this).val().length >= 10) {
      var text = $(this).val();
      $(this).autocomplete({        
          source: "/book_copies/" + text + ".json",
          max: 11,
          minLength: 11,
          create: function() {
            $(this).data( "ui-autocomplete" )._renderItem = function( ul, item ) {
              return $( "<li>" )
                .append( "<div>" + item.barcode + " " + item.book_edition.title + "</div>" )
                .appendTo( ul );
            }
          },
          select: function( event, ui ) {
            insert_product_values(event.target, ui.item);             
            return false;
          }
        });  
      
      function insert_product_values(el, bc) {
        let row = $(el).closest('tr');
        $(el).val(bc.barcode);
        console.log(bc); 
        if (bc.loans) { 
          Materialize.toast("Book is Borrowed", 4000, 'red');
        } else {
          if ($('#disposed_notes').val() == '') {
            Materialize.toast('Please fill the notes first!', 3000, 'orange');
          } else {
            insert_values(bc, row);
          }
        }
      } 
    }  
  });

  var insert_values = function (data, el) {
    var bc = data;
    el.find(".barcode").val(bc.barcode);
    el.find(".booktitle").val(bc.book_edition.title);
    el.find(".authors").val(bc.book_edition.authors);
    el.find(".status").val("Disposed")
    save_row(bc.id);    
  };

  $(document).on('click', '.btndel', function() {
    $(this).parent().parent('tr').remove();
  });

  $("form").on("keypress", function (e) {
    if (e.keyCode == 13) {
        return false;
    }
  });

  /* ====================== Scanner ================================*/
  $(".barcode").codeScanner({ 
    minEntryChars: 11,
    onScan: function($element, barcode) {
      $.getJSON("/book_copies/"+barcode+".json?", null, function (data) {        
        if (data.book_copy.loans) {
          Materialize.toast("Book is Borrowed", 4000, 'red');
        } else {
          if ($('#disposed_notes').val() == '') {
            Materialize.toast('Please fill the notes first!', 3000, 'orange');
          } else {
            clone_row();            
            insert_values_scan(data, $("tr:last"));
          }
        }
      }).fail(function(xhr){
        Materialize.toast($.parseJSON(xhr.responseText).errors, 4000, 'red');
      });                 
    }
  });

  var insert_values_scan = function (data, el) {
    var bc = data;
    if ($("tr:last").find(".barcode").val() != "") {
      el.find(".barcode").val("");
    }
    el.find(".barcode").val(bc.book_copy.barcode);
    el.find(".booktitle").val(bc.book_copy.book_edition.title);
    el.find(".authors").val(bc.book_copy.book_edition.authors);
    el.find(".status").val("Disposed");
    save_row(bc.book_copy.id);
  };

  
    
  
