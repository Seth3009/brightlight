- title "New book copy for #{@book_edition.title}"
 
.card-panel
  table
    tr
      td style="vertical-align:top"
        - thumbnail = @book_edition.small_thumbnail.present? ? @book_edition.small_thumbnail : 'book-icon.png' 
        = image_tag(thumbnail, class: 'list_image')
      td
        .list_description
          dl.row
            dt = @book_edition.title
            dd = @book_edition.subtitle
            dd.col.s6
              .label Author
              .item = @book_edition.authors
            dd.col.s6 
              .label Publisher
              .item = @book_edition.publisher
            dd.col.s4
              .label ISBN
              .item = @book_edition.isbn13
            dd.col.s4
              .label ISBN 10
              .item = @book_edition.isbn10
            dd.col.s4
              .label Reference No
              .item = @book_edition.refno              
            dd.col.s4
              .label Published Date
              .item = @book_edition.published_date
            dd.col.s4
              .label Page count
              .item = @book_edition.page_count

= form_for @book_edition do |f|
  nav
    .nav-wrapper
      .brand-logo style="margin-left: 20px; font-size:1.5em"
        | Create new book copies
      ul
        li.right
          / Note: 'Append' new row at the end of the 'tbody#book_copy' node
          = link_to_add_association f, :book_copies, 'data-association-insertion-method' => 'prepend', 'data-association-insertion-node' => 'tbody#book_copy'
            ' Add Row
            i.material-icons.left playlist_add

  .card-panel
    .row
      table.compact
        thead
          th Barcode
          th Label
          th Condition
          th Status
          th Notes
        tbody#book_copy
          = f.fields_for :book_copies, @book_edition.book_copies.build do |book_copy|
            = render 'book_copy_fields', f: book_copy

  .toolbar.z-depth-1
    button.btn.waves-effect.waves-light type="submit" Save
    = link_to 'Cancel', book_edition_book_copies_path(@book_edition), class: "waves-effect waves-light btn btn-flat"

javascript:
  // The following callback function will turn select elements in the dynamically created row 
  // into MaterializeCSS style selects.
  $('#book_copy').on('cocoon:after-insert', function() {
    $('select').material_select();
  });

  $("[name$='[barcode]']").codeScanner({
    minEntryChars: 11,
    onScan: function($element, barcode) {
      $.getJSON("/book_copies/"+barcode+"/check_barcode.json", null, function (data) {
        /* Barcode already exists in database */
        Materialize.toast("Error: barcode already exists.", 4000, 'red');
      }).fail(function(){
        /* Entered barcode doesn't exist in the database */
        if ($("tr:last").find("[name$='[barcode]']").val() != "") {
          $(".add_fields").trigger('click');
        } else if (!$("tr:last").is(":visible")) {
          $("tr:last").show();
        }
        insert_values(barcode, $("tr:last"));
      });
    }
  });
  $("tbody#book_copy").on("keypress", "tr", function (e) {  
    if (e.keyCode == 13) {
      e.preventDefault();
      e.stopPropagation();
      var barcode = $(this).find("[name$='[barcode]']").val().trim();
      var element = $(this);
      $.getJSON("/book_copies/"+barcode+"/check_barcode.json", null, function (data) {
        /* Barcode already exists in database */
        $(this).find("[name$='[barcode]']").val('');
        Materialize.toast("Error: barcode already exists.", 5000, 'red');
      }).fail(function(){
        /* Entered barcode doesn't exist in the database */
        insert_values(barcode, element);
      });
    }
  });
  var insert_values = function (barcode, el) {
    el.find("[name$='[barcode]']:first").val(barcode);
    el.find("[name$='[book_condition_id]']:first").val($("[name$='[book_condition_id]']:last").val());
    el.find('select').material_select();
    el.find(".add_fields").trigger('click');      
  };

